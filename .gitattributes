# Auto detect text files and perform LF normalization
* text=auto

#udemy講座　現役シリコンバレーエンジニアが教えるpython3入門＋応用＋アメリカのシリコンバレー流コードスタイル

#####       pythonの基本　　　　　　　#####



#変数宣言

num = 1
name = 'Mike'
is_ok = True

print(num,type(num))      #numのタイプがわかる
print(name,type(name))
print(is_ok,type(is_ok))

num = name  #numにnameを代入する

name1 = '1' #注意1nameとは書けない

new_num = int(name1)　　#型変換ができる

print(new_num,type(new_num))


#まずはprintで出力

print('Hi','Mike',end='\n') #Hi Mike
print('Hi','Mike',sep=',',end='\n') #Hi,Mike

print('Hi','Mike',sep=',',end='')
print('Hi','Mike',sep=',',end='') #Hi,MikeHi,Mike

#数値


#今回は対話型シェルで実験してみる

2+2 #4

5-2 #3

5*6 #30

50-5*6 #20

(50-5)*6 #270

8/5 #1.6

17//3 #5

17%3 #2

5**2 #25

5*5*5*5*5 #5**5

x = 5
y = 10

x*y  #50

pie = 3.141515151515151515
round(pie, 2)  #3.14 round to 2 decimal places

exit()  #対話型シェルを離れる

clear #対話型シェルをクリアする

import math

result = math.sqrt(25) #5
print(result)

y = math.log2(10) #3.321928094887362
print(y)

print(help(math)) #help関数を用いてmath関数について確認できる

#文字列

print('Hello')
print("Hello")
print('I don't know ')   '  #発言が途中で止まってしまう

print('I don\'t know ')　　#\'とすることで''が途中で途切れないようにしている。バックスラッシュをつける
print("I don't know")

print('say "I don\'t know"')
print("say \"I don't know\"")

print("###########################################")
print("""\    #バックスラッシュにより空白行をなくすことができる
line1
line2
line3\
""")         #""""""で改行は自動的に実行される
print("###########################################")

print('hi' * 3 + 'mike')

print('py'  'thon')     #きれいに出力される

prefix = 'py'

print(prefix 'thon')  #変数にthonつなげるのは不可能

s = ("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
     "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb")   コードが長くわかりにくいため、こう表現するほうがきれい

print(s)

#文字列のインデックスとパラドックス

word = 'python'
print(word[0])
print(word[1])
print([-1])  #最後の文字の表示ができる

print(word[0:2])  #print(word[:2])とするのと変わらない
　　　　　　　　　　　#二番目の手前の文字までを出力する(py)
print(word[2:5])

word[0] = 'j'  これはエラーがでる

word = 'j' + word[1:]

print(word[:]) #wordのコピーができる

n = len(word)  #文字数がわかる関数len


#文字のメソッド

s = 'My name  is Mike. Hi Mike.'

print(s)

s.  #ドットをつけると便利なメソッドがあることを表示してくれる

is_start = s.startswith('My') #Myから始まっているかどうかを確認するメソッド（True False でわかる）

print(s.find('Mike')  #何番目にMikeがありますか
print(s.rfind('Mike') #後ろから何番目にMikeがありますか
print(s.count('Mike')
print(s.upper())
print(s.lower())
print(s.replace('Mike','Nancy'))

#メソッドについては、pythonに触れていくにつれて、記憶できるようになっていく

#文字の代入

a ='a'
print(f'a is {a}')

x, y, z = 1, 2, 3　#タプルのアンパッキング
print('a is {x} {y} {z}')
print('a is {z} {y} {x}')

name = 'Jun'
family = 'Sakai'

print(f'My name is {name} {family}. I am {family} {name}')  #何度も'を使って接続する必要がないため便利

str(1)  #型が変換できる。この例では1をint型からstr型に変換している

#####     データー構造　　　　　#####
#リスト型

#対話型シェルを使う

l = [1,20,4,50,2,1,2]

l[0]

l[2:]

l[:]

len(l)

type(l)

list('baioar;nagilbfiulbailfh')  #リストに変換してくれる

l[100]  #IndexErrorが返ってくる

n = [1,2,3,4,5,6,7,8,9,10]

n[::2]  #はじめ:終わり:スキップ

n[::-1]  #逆順

a = ['a','b','c']
n = [1,2,3]

x = [a,n] #リストの中にリストを入れることができる

x[0]  #0番目のリストを取り出してくる

x[0][0]　　#0番目のリストから、0番目の文字をさしている


#リストの操作
#リストのメソッド
#リストのコピー
#リストの使い所
#タプル型
#タプルのアンパッキング
#タプルの使い所
#辞書型
#辞書型のメソッド
#辞書のコピー
#辞書の使い所
#集合型
#集合のメソッド
#集合の使い所
#####      制御フローとコード構造　　　　　#####
#コメント
#1行が長くなる場合
#if文
#デバッカーを使って確認してみる
#比較演算子と論理演算子
#InとNotの使い所
#値が入っていない判定をチェックするテクニック
#Noneを判定する場合
#while文とcontinue文とbreak文
#while else文
#input関数
#for文とbreak文とcontinue文
#for else文
#range関数
#enumerate関数
#zip関数
#辞書をfor文で定義する
#関数定義
#関数の引数と返り値の宣言
#位置引数とキーワード引数とデフォルト引数
#デフォルト引数で気をつけること
#位置引数のタプル化
#キーワード引数の辞書化
#Docstringsとは
#関数内関数
#クロージャー
#デコレーター
#ラムダ
#ジェネレーター
#リスト内包表記
#辞書包括表記
#集合内包表記
#ジェネレーター内包表記
#名前空間とスコープ
#例外処理
#独自例外の作成
#####     モジュールとパッケージ     #####
#コマンドライン引数
#Import文とＡＳ
#絶対パスと相対パスのImport
#アスタリスクのインポートと__init__.pyと__all__の意味
#ImportErrorの使い所
#set.upでパッケージ化して配布する
#組み込み関数
#標準ライブラリ
#サードパーティのライブラリ
#Importする際の記述の仕方
#__name__と__main__
#####     オブジェクトとクラス     #####
#クラスの定義
#クラスの初期化とクラス変数
#コンストラクタとデスクトラクタ
#クラスの継承
#メソッドのオーバーライドとsuperによる親のメソッドの呼び出し
#プロパティーを使った属性の設定
#クラスを構造体として扱う時の注意点
#ダックタイピング
#抽象クラス
#多重継承
#クラス変数
#クラスメソッドとスタティックメソッド
#特殊メソッド












